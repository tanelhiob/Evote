@page "/campaign/{id:guid}"
@using Models
@using Services
@inject HttpClient HttpClient
@inject IUserService UserService

@if (_campaign == null)
{
    <div>loading...</div>
}
else
{
    <h3>@_campaign.Name <small>@Id</small></h3>
    <div><time>@_campaign.Start</time> - <time>@_campaign.End</time></div>
    <div>@(_campaign.IsPublic ? "public" : "hidden")</div>
    @if (_campaign.Choices == null)
    {
        <div>
            <input type="text" bind="@ManualChoice" placeholder="your choice"/>
            <button class="@(CastVoteOperation.Status == OperationStatus.InProgress ? "disabled" : null)" onclick="@(() => VoteAsync(ManualChoice))">Vote</button>
        </div>
    }
    else
    {
        <ul>
            @foreach (var choice in _campaign.Choices.Value)
            {
                <li>
                    <button class="@(CastVoteOperation.Status == OperationStatus.InProgress ? "disabled" : null)" onclick="@(() => VoteAsync(choice))">@choice</button>
                </li>
            }
        </ul>
    }

    if (CastVoteOperation.Status == OperationStatus.Successful)
    {
        <div>Check @CastVoteOperation.Success</div>
    }
    else if (CastVoteOperation.Status == OperationStatus.Failed)
    {
        <div>Error - @CastVoteOperation.Failure</div>
    }

    <div>
        <button onclick="@UpdateVotesAsync">Display results</button>
        @if (_results != null)
        {
            <h4>Voters</h4>
            foreach (var voter in _results.Voters)
            {
                <div>@voter.Name @voter.Token</div>
            }

            <h4>Choices</h4>
            foreach (var choice in _results.Choices)
            {
                <div>@choice.Value @choice.Token</div>
            }
        }
    </div>
}

@functions {

    [Parameter]
    public Guid Id { get; set; }

    private Models.Campaign _campaign;
    private string ManualChoice;
    private Operation<Guid, string> CastVoteOperation = new Operation<Guid, string>();

    private VotingResults _results;

    protected override async Task OnInitAsync()
    {
        _campaign = await HttpClient.GetJsonAsync<Models.Campaign>($"http://localhost:7071/api/GetCampaign/{Id}");
    }

    private async Task VoteAsync(string choice)
    {
        Console.WriteLine($"Casting vote {choice}");

        CastVoteOperation.Start();
        StateHasChanged();

        var määdžik = Guid.NewGuid();

        var vote = new Vote
        {
            CampaignId = Id,
            Choice = choice,
            ChoiceToken = määdžik.ToString(),
            Voter = UserService.Username ?? "anonymous",
            VoterToken = määdžik.ToString(),
        };

        var result = await HttpClient.PostJsonAsync<Vote>("http://localhost:7071/api/CastVote", vote);

        CastVoteOperation.Complete(määdžik);
    }

    private async Task UpdateVotesAsync()
    {
        _results = await HttpClient.GetJsonAsync<VotingResults>($"http://localhost:7071/api/GetVotes/{Id}");
    }

    private class VotingResults
    {
        public IList<Voter> Voters { get; set; }
        public IList<Choice> Choices { get; set; }
    }
}